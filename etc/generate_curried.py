import toolz
import toolz.curried
from toolz.curried import operator as cop


init_template = '''\
"""
THIS FILE IS AUTOMATICALLY GENERATED

Please make all edits in etc/generate_curried.py and re-run
cytoolz/tests/test_curried_toolzlike.py
"""

import cytoolz
from cytoolz import *
from .operator import *


{curried}

from .exceptions import *
del cytoolz
'''


def gen_init():
    tc = tuple(
        (k, v) for k, v in vars(toolz.curried).items()
        if isinstance(v, toolz.curry) and 'operator' not in v.func.__module__
    )
    return init_template.format(
        curried='\n'.join(
            '{0} = cytoolz.curry({0})'.format(k) for k, v in tc
        ),
    )


op_template = '''\
"""
THIS FILE IS AUTOMATICALLY GENERATED

Please make all edits in etc/generate_curried.py and re-run
cytoolz/tests/test_curried_toolzlike.py
"""

from operator import (
    {imports}
)

import cytoolz

{curried}

del cytoolz
'''


def gen_op():
    return op_template.format(
        imports='\n    '.join(k + ',' for k in vars(cop)),
        curried='\n'.join(
            '{0} = cytoolz.curry({0})'.format(k)
            for k, v in vars(cop).items() if isinstance(v, toolz.curry)
        )
    )


def main(argv):
    if len(argv) == 1 or argv[1].lower() == 'init':
        fn = gen_init
    elif argv[1].lower() in ('op', 'operator'):
        fn = gen_op
    else:
        raise ValueError('%s is not a valid argument' % argv[1])
    print(fn())


if __name__ == '__main__':
    from sys import argv
    main(argv)
