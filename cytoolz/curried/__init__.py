###############################################################################
# THIS FILE IS AUTOMATICALLY GENERATED                                        #
#                                                                             #
# Please make all edits in etc/generate_curried.py and re-run                 #
# cytoolz/tests/test_curried_toolzlike.py                                     #
###############################################################################
"""
Alternate namespece for cytoolz such that all functions are curried

Currying provides implicit partial evaluation of all functions

Example:

    Get usually requires two arguments, an index and a collection
    >>> from cytoolz.curried import get
    >>> get(0, ('a', 'b'))
    'a'

    When we use it in higher order functions we often want to pass a partially
    evaluated form
    >>> data = [(1, 2), (11, 22), (111, 222)]
    >>> list(map(lambda seq: get(0, seq), data))
    [1, 11, 111]

    The curried version allows simple expression of partial evaluation
    >>> list(map(get(0), data))
    [1, 11, 111]

See Also:
    cytoolz.functoolz.curry
"""
import inspect

from . import exceptions
from . import operator
import cytoolz


def _should_curry(f):
    return f in set([
        cytoolz.partition,
        cytoolz.unique,
        cytoolz.take,
        cytoolz.map,
        cytoolz.topk,
        cytoolz.join,
        cytoolz.interleave,
        cytoolz.assoc,
        cytoolz.countby,
        cytoolz.pluck,
        cytoolz.sliding_window,
        cytoolz.groupby,
        cytoolz.reduceby,
        cytoolz.dissoc,
        cytoolz.keymap,
        cytoolz.merge_with,
        cytoolz.itemfilter,
        cytoolz.memoize,
        cytoolz.iterate,
        cytoolz.accumulate,
        cytoolz.valmap,
        cytoolz.cons,
        cytoolz.do,
        cytoolz.sorted,
        cytoolz.get_in,
        cytoolz.remove,
        cytoolz.mapcat,
        cytoolz.take_nth,
        cytoolz.get,
        cytoolz.interpose,
        cytoolz.itemmap,
        cytoolz.nth,
        cytoolz.partitionby,
        cytoolz.drop,
        cytoolz.merge,
        cytoolz.reduce,
        cytoolz.filter,
        cytoolz.update_in,
        cytoolz.keyfilter,
        cytoolz.tail,
        cytoolz.valfilter,
        cytoolz.partition_all,
    ])


def _curry_namespace(ns):
    return dict(
        (name, cytoolz.curry(f) if _should_curry(f) else f)
        for name, f in ns.items() if '__' not in name
    )


locals().update(cytoolz.merge(
    _curry_namespace(vars(cytoolz)),
    _curry_namespace(vars(exceptions)),
))

# Clean up the namespace.
del _should_curry
del exceptions
del cytoolz

